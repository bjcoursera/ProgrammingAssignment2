## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
#set original matrix,invers = NUll
set <- function(y) {
x <<- y
m <<- NULL
}
#give back the original matrix
get <- function() x
#set the inverse value/ Storage of inverse matrix in m
setinv <- function(InverseM) m <<- InverseM
#give back inverse matrix
getinv <- function() m
#return
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#try to get calculated inverse matrix
m <- x$getinv()
#check, if there is a stored inverse matrix + return of this stored matrix
if(!is.null(m)) {
message("getting cached data")
return(m)
}
#get original matrix
data <- x$get()
#calculate inverse
m <- solve(data)
#set inverse matrix (stored for the next execution)
x$setinv(m)
#return of inverse matrix
m
}
#test programm
testCourseraProject2 <-function(){
z <-makeCacheMatrix(matrix(c(2,1,5,3),2))
print(z$get())
i <- cacheSolve(z)
print(i)
cacheSolve(z)
}
testCourseraProject2()
q()
